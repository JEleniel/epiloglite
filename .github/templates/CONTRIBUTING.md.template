# Contributing

## Modifying the code

- All contributors agree to the [Developer's Certificate of Origin](DCO.md)
- Follow the GitHub guide for [Contributing to a project](https://docs.github.com/en/get-started/exploring-projects-on-github/contributing-to-a-project)

## Code Standards

- Follow the official style guide for your programming language
- Write clear, documented, and testable code
- Include comments for complex logic
- Keep functions focused and concise
- Write meaningful variable and function names
- Add unit tests for new functionality
- Ensure all tests pass before submitting

## Pull Requests

- Create a branch with a descriptive name
- Make focused, single-purpose changes
- Include comprehensive test coverage
- Update documentation!
- Follow the pull request template
- Respond to review feedback promptly
- Rebase your branch before merging

## Issues

- Check existing issues before creating new ones
- Use issue templates when available
- Provide clear reproduction steps for bugs
- Include system/environment details
- Add relevant logs or screenshots
- Tag issues appropriately

## Commits

- All commits must be linked to one or more Issues or Discussions. Feel free to [open a new issue](/issues/new) if necessary
- Write clear commit messages in the imperative mood
- Keep commits atomic and focused
- Sign your commits
- Reference related issues in commit messages

```text
# Contributing

Thank you for contributing! This template is focused on Rust projects and describes the preferred workflow for EpilogLite.

## Before you open a PR

- Ensure your branch is based on the current `main` or the target branch.
- Run formatting, lints, and tests locally:

```bash
cargo fmt --all -- --check
cargo clippy --workspace --all-targets --all-features
cargo test --workspace --all-features
```

## Pull Request guidance

- Create a branch with a descriptive name (e.g., `feat/rowid-index`).
- Keep changes focused and small.
- Update docs when public behavior changes.
- Use the project PR template and include a clear description, related issues, and testing notes.

## Issues

- Search for existing issues first.
- Provide steps to reproduce, environment, and relevant logs.

## Commits

- Use clear, imperative commit messages.
- Keep commits small and focused; use multiple commits when appropriate.

## Repository configuration changes

- Do not modify `.github/` files directly without a PR; these changes affect CI and contributor experience. Use `CODEOWNERS` to determine required reviewers.

```
